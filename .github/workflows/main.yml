name: main

on:
  push:
  pull_request:
  schedule:
    # Build and push Docker images every 3 hours
    - cron:  '0 */3 * * *'
  # allow manual trigger
  workflow_dispatch:
concurrency:
  group: main-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  get_latest_commit_hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit_hash.outputs.commit_hash }}
      short_commit_hash: ${{ steps.get_commit_hash.outputs.short_commit_hash }}
      check_release: ${{ steps.check_release.outputs.exists }}
    steps:
      - name: Get the latest commit hash
        id: get_commit_hash
        run: |
          COMMIT_HASH=$(git ls-remote https://github.com/lysnikolaou/cpython.git refs/heads/tstrings | awk '{print $1}')
          SHORT_COMMIT_HASH=$(echo $COMMIT_HASH | cut -c 1-7)
          echo "::set-output name=commit_hash::$COMMIT_HASH"
          echo "::set-output name=short_commit_hash::$SHORT_COMMIT_HASH"
      - name: Check if Release Exists
        id: check_release
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://github.com/koxudaxi/pyodide/releases/tag/${{ steps.get_commit_hash.outputs.commit_hash }}")
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Release exists on GitHub."
            echo "::set-output name=exists::true"
          else
            echo "Release does not exist on GitHub."
            echo "::set-output name=exists::false"
          fi

  build-core:
    needs: get_latest_commit_hash
    if: needs.get_latest_commit_hash.outputs.check_release == 'false' || github.event_name != 'schedule'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      EMSDK_NUM_CORES: 3
      EMCC_CORES: 3
      PYODIDE_JOBS: 3
      CCACHE_DIR: /tmp/ccache
    permissions:
      actions: write
      checks: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Cache ccache output
        uses: actions/cache@v4
        with:
          path: |
            /tmp/ccache
          key: ${{ hashFiles('Makefile.envs') }}-${{ runner.os }}-v20211025-
      - uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: pyodide-env
          environment-file: environment.yml
          channels: conda-forge
      - name: Cache builder Python
        id: cache-builder
        uses: actions/cache@v4
        with:
          path: |
            ~/Publish_build
            .build
          key: ${{ needs.get_latest_commit_hash.outputs.commit_hash }}-${{ runner.os }}-v20240719-

      - name: Build builder python
        if: steps.cache-builder.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          BUILD_DIR=/tmp/builder/${{ needs.get_latest_commit_hash.outputs.commit_hash }}
          mkdir -p "$BUILD_DIR"
          cd "$BUILD_DIR"
          git init
          git remote add origin https://github.com/lysnikolaou/cpython.git
          git fetch --depth 1 origin ${{ needs.get_latest_commit_hash.outputs.commit_hash }}
          git checkout FETCH_HEAD
          ./configure --prefix=/tmp/builder/python && make -j3 && make install
      - name: Add builder python to PATH
        shell: bash
        run: |
          echo "/tmp/builder/python/bin" >> $GITHUB_PATH
      - name: Check Versions
        shell: bash -l {0}
        run: |
          python --version
          node --version
          npm --version
          which python
          which node
          which npm
      - name: Check Versions
        shell: bash -l {0}
        run: |
          python --version
          node --version
          npm --version
          which python
          which node
          which npm

      - name: Install dependencies (ubuntu)
        shell: bash -l {0}
        if: ${{ contains(runner.os, 'ubuntu') }}
        run: |
          sudo apt install -y build-essential git xxd

      - name: Install dependencies (macos)
        shell: bash -l {0}
        if: ${{ contains(runner.os, 'macos') }}
        run: |
          brew install coreutils

      - name: Install dependencies (Python)
        shell: bash -l {0}
        run: |
          pip install -r requirements.txt

      - name: Build emsdk
        shell: bash -l {0}
        run: |
          which ccache
          
          ccache -z
          make -C emsdk
          ccache -s

      - name: Build Cpython
        shell: bash -l {0}
        run: |
          # This is necessary to use the ccache from emsdk
          source pyodide_env.sh
          
          which ccache
          
          ccache -z
          make -C cpython
          ccache -s

      - name: build Pyodide core
        shell: bash -l {0}
        run: |
          # This is necessary to use the ccache from emsdk
          source pyodide_env.sh
          ccache -z
          PYODIDE_PACKAGES="tag:core" make
          ccache -s

      - name: check-size
        shell: bash -l {0}
        run: |
          ls -lh dist/
          
          pip install brotli
          ./tools/check_compressed_size.py dist/pyodide.asm.* dist/python_stdlib*

      - name: Store artifacts build
        uses: actions/upload-artifact@v4
        if: needs.get_latest_commit_hash.outputs.check_release == 'false'
        with:
          name: core-build-${{ runner.os }}
          path: ./dist/
          retention-days: 60
      - name: Make dist tarball
        shell: bash -l {0}
        run: |
          tar -czf dist.tar.gz dist/
      - name: Release
        uses: softprops/action-gh-release@v2
        if: needs.get_latest_commit_hash.outputs.check_release == 'false'
        with:
          files: dist.tar.gz
          tag_name: ${{ needs.get_latest_commit_hash.outputs.short_commit_hash }}
          make_latest: true
      - name: Add commit hash file
        run: |
          echo "${{ needs.get_latest_commit_hash.outputs.commit_hash }}" > dist/commit_hash.txt
          echo "${{ needs.get_latest_commit_hash.outputs.short_commit_hash }}" > dist/short_commit_hash.txt

      - name: Prepare directory structure
        run: |
          mkdir -p "dist_new/tstrings"
          cp -r dist/* "dist_new/tstrings/"

      - name: Upload pages artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: ./dist_new
          retention-days: 1

  deploy:
    needs: [ build-core, get_latest_commit_hash ]
    if: needs.get_latest_commit_hash.outputs.check_release == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: ./dist_temp

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist_temp
          keep_files: true
          enable_jekyll: false
          commit_message: 'deploy: ${{ needs.get_latest_commit_hash.outputs.commit_hash }}'
